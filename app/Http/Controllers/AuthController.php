<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use GuzzleHttp\Client;
use Illuminate\Support\Facades\Cookie;
use Illuminate\Support\Facades\Session;


class AuthController extends Controller
{
    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub

    }

    public function indexRegister()
    {
        if($this->checkLogin()==true)
        {
            return redirect('/');
        }
        return view('auth/register');
    }

    public function indexLogin()
    {
        if($this->checkLogin()==true)
        {
            return redirect('/');
        }
        return view('auth/login');
    }

    public function insert(Request $request)
    {


        if($this->checkLogin()==true)
        {
            return redirect('/');
        }

        if($request->password != $request->password2)
        {

            $user = array_merge($request->only('name','username','email'),[
                'error' => ['password' => 'Please write the same password']
            ]);

            $user = json_decode(json_encode($user));

            return view('auth/register',compact('user'));
        }

        $user = $this->guzzlePost($request->all(),'users/add');

//        $test = ['test1' => [
//                            'test1item1' => 'item1',
//                            'test1item2' => 'item2'
//                ],
//                'test2' => [
//                    'test2item1' => 'item2',
//                    'test2item2' => 'item2'
//                ],
//            'test3' => 'item1'
//        ];
//        $test = json_decode(json_encode($test));
//        dd($test->test1->test1item1);
        if(!empty($user['error']))
        {
            $user = array_merge($request->only('name','username','email'),$user);
            $user = json_decode(json_encode($user));

            return view('auth/register',compact('user'));
        }


        $this->createSession($this->jwtDecode($user));

        return redirect('/');
    }

    public function login(Request $request)
    {
        if($this->checkLogin()==true)
        {
            return redirect('/');
        }

//        $user =  $this->jwtDecode($this->guzzleGet('users/login/'.$request->username));
        $user = $this->guzzleGet('users/login/'.$request->usernameOrEmail);

        if(!empty($user['error']))
        {
            $user = array_merge($request->only('usernameOrEmail'),[
                'error' => 'The user or password is incorrect'
            ]);
            return view('auth/login',compact('user'));
        }

        $user =  $this->jwtDecode($user);

        if($user->password != $request->password)
        {
            $user = array_merge($request->only('usernameOrEmail'),[
                'error' => 'The user or password is incorrect'
            ]);
            return view('auth/login',compact('user'));
        }

        $this->createSession($user);

        return redirect('/');
    }

    public function logout()
    {
        if($this->checkLogin()==false)
        {
            return redirect('/');
        }
        $this->sessionClear();
        return redirect('/');
    }


}
